{"config":{"lang":["es","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":"<p>\"Dos de las tecnolog\u00edas m\u00e1s grandes que surgieron en el siglo XX fueron las computadoras y la exploraci\u00f3n espacial. Y no es coincidencia que crecieran juntas.\" - Walter Isaacson</p>"},{"location":"#bienvenidos-a-astronautica","title":"Bienvenidos a Astron\u00e1utica","text":"<p>Bienvenidos a Astron\u00e1utica, la p\u00e1gina web dise\u00f1ada como un compa\u00f1ero interactivo para el libro de Juan Jos\u00e9 Mej\u00eda. Este sitio est\u00e1 dedicado a expandir y explorar las ideas presentadas en su libro, con el objetivo de fomentar un entendimiento m\u00e1s profundo y pr\u00e1ctico de la ciencia que se encuentra en la intersecci\u00f3n de la computaci\u00f3n y la exploraci\u00f3n espacial.</p>"},{"location":"#que-puedes-encontrar-aqui","title":"\u00bfQu\u00e9 puedes encontrar aqu\u00ed?","text":"<p>En esta p\u00e1gina web, encontrar\u00e1s un desglose detallado y explicaciones de los c\u00f3digos utilizados y explicados en el libro. Pero eso no es todo, tambi\u00e9n proporcionaremos enlaces directos a Replit, una plataforma en l\u00ednea donde podr\u00e1s ejecutar y jugar con estos c\u00f3digos t\u00fa mismo/a.</p> <p>Incluso si nunca antes has programado, no te preocupes, hemos hecho un gran esfuerzo para hacer que todo sea accesible y f\u00e1cil de entender, independientemente de tu nivel de experiencia.</p> <p>Estamos emocionados por acompa\u00f1arte en este viaje a trav\u00e9s de la vastedad del cosmos, entendida a trav\u00e9s del lenguaje de la programaci\u00f3n. \u00a1Esperamos que disfrutes y aprendas tanto como nosotros hemos disfrutado preparando este contenido para ti!</p>"},{"location":"codigo%20%26%20scripts/","title":"C\u00f3digos &amp; Scripts","text":"<p>En esta secci\u00f3n, encontrar\u00e1s una serie de c\u00f3digos y scripts que se presentan en el libro. Cada c\u00f3digo viene con una descripci\u00f3n detallada de lo que hace, c\u00f3mo lo hace, y los conceptos que se utilizan.</p> <p>Para cada c\u00f3digo o script, la estructura es la siguiente:</p>"},{"location":"codigo%20%26%20scripts/#titulo-del-codigo","title":"T\u00edtulo del c\u00f3digo","text":"<p>Primero, se presenta el c\u00f3digo en s\u00ed, que se mostrar\u00e1 en un bloque de c\u00f3digo para que sea f\u00e1cil de identificar y copiar si es necesario. Se incluye el t\u00edtulo del c\u00f3digo para facilitar la referencia en el libro o en la p\u00e1gina.</p> <pre><code># Aqu\u00ed va el c\u00f3digo\n</code></pre>"},{"location":"codigo%20%26%20scripts/#descripcion-a-detalle","title":"Descripci\u00f3n a detalle:","text":"<p>Despu\u00e9s del c\u00f3digo, viene una lista de puntos que describen en detalle lo que hace el c\u00f3digo y c\u00f3mo lo hace. Se explica cada l\u00ednea o bloque de c\u00f3digo de manera que puedas entender no s\u00f3lo qu\u00e9 hace, sino tambi\u00e9n por qu\u00e9 lo hace. </p> <p>Tambi\u00e9n se proporciona informaci\u00f3n sobre cualquier concepto o terminolog\u00eda que pueda ser \u00fatil para entender el c\u00f3digo. Estos puntos se estructuran de manera que puedas seguirlos a medida que lees o pruebas el c\u00f3digo.</p>"},{"location":"codigo%20%26%20scripts/#playground","title":"Playground:","text":"<p>Finalmente, se proporciona un enlace a Replit donde puedes probar el c\u00f3digo t\u00fa mismo/a. Este \"playground\" te permitir\u00e1 interactuar con el c\u00f3digo, cambiar valores, y ver c\u00f3mo se alteran los resultados. Esto te dar\u00e1 una experiencia pr\u00e1ctica de c\u00f3mo funciona el c\u00f3digo y de c\u00f3mo los diferentes par\u00e1metros afectan el resultado.</p> <p>Este formato se seguir\u00e1 para cada c\u00f3digo y script en esta secci\u00f3n, proporcion\u00e1ndote una experiencia de aprendizaje consistente y completa.</p>"},{"location":"codigo%20%26%20scripts/codigo4.1/","title":"C\u00f3digo 4.1:","text":"Determinaci\u00f3n num\u00e9rica de m_0 para empuje en pozos gravitacionales<pre><code>import numpy as np \nfrom scipy.optimize import root\ndef main():\nmu = 0.104 #Coeficiente de masa total\ne = 0.08 #Coeficiente de masa estructural\ndelta_v = 7000.0 #Delta v requerido (m/s)\nm_c = 500.0 #Masa de carga (kg)\nI_sp = 311.0 #Impulso espec\u00edfico (s)\ng0 = 9.81 #Aceleraci\u00f3n gravitacional en el planeta Tierra (m/s^2)\nm_p = 321.21 #Flujo m\u00e1sico (kg/s)\ndef f(x):\nf = g0*I_sp*np.log(x/(e*(x-m_c)+m_c))-(g0*x*(1-mu)/(5*m_p))-delta_v\nreturn f\nm_0 = root(fun=f,x0=70000)\nprint(m_0.x[0].round(2))\nif __name__ == \"__main__\":\nmain()\n</code></pre>"},{"location":"codigo%20%26%20scripts/codigo4.1/#descripcion-a-detalle","title":"Descripci\u00f3n a detalle:","text":"<ol> <li> <p><code>import numpy as np</code> y <code>from scipy.optimize import root</code>: Estas l\u00edneas importan los m\u00f3dulos necesarios. Numpy se utiliza para realizar operaciones matem\u00e1ticas y scipy.optimize proporciona la funci\u00f3n <code>root</code> que se utiliza para encontrar las ra\u00edces de ecuaciones.</p> </li> <li> <p><code>def main():</code> : Esta l\u00ednea define la funci\u00f3n principal.</p> </li> <li> <p>Las siguientes l\u00edneas dentro de la funci\u00f3n <code>main</code> definen varias constantes:</p> <ul> <li><code>mu</code> es el coeficiente de masa total.</li> <li><code>e</code> es el coeficiente de masa estructural.</li> <li><code>delta_v</code> es el cambio de velocidad requerido, com\u00fanmente conocido como \"delta-v\".</li> <li><code>m_c</code> es la masa de la carga de la nave espacial.</li> <li><code>I_sp</code> es el impulso espec\u00edfico, que es una medida de la eficiencia de un motor de cohete.</li> <li><code>g0</code> es la aceleraci\u00f3n gravitacional en la Tierra.</li> <li><code>m_p</code> es el flujo m\u00e1sico, que podr\u00eda referirse a la cantidad de combustible que el cohete puede quemar por segundo.</li> </ul> </li> <li> <p><code>def f(x):</code> : Esta funci\u00f3n interna define la ecuaci\u00f3n que se va a resolver. En este caso, es una versi\u00f3n de la ecuaci\u00f3n del cohete que ha sido reorganizada para poder resolverla para <code>m_0</code> (la masa inicial de la nave espacial) dada la constante <code>delta_v</code>.</p> </li> <li> <p><code>m_0 = root(fun=f,x0=70000)</code>: Esta l\u00ednea utiliza la funci\u00f3n <code>root</code> de scipy para encontrar la ra\u00edz de la ecuaci\u00f3n definida en <code>f(x)</code>. El valor inicial para la b\u00fasqueda de la ra\u00edz es <code>70000</code>.</p> </li> <li> <p><code>print(m_0.x[0].round(2))</code>: Esta l\u00ednea imprime el resultado de la b\u00fasqueda de la ra\u00edz, que es el valor calculado para <code>m_0</code>. Se redondea a 2 decimales.</p> </li> <li> <p>Las \u00faltimas dos l\u00edneas simplemente llaman a la funci\u00f3n principal cuando se ejecuta el script.</p> </li> </ol> <p>En resumen, el objetivo general de este script es calcular la masa inicial necesaria para una nave espacial dada una serie de par\u00e1metros y requerimientos de misi\u00f3n.</p>"},{"location":"codigo%20%26%20scripts/codigo4.1/#playground","title":"Playground:","text":"<p>Haga click en este enlace para poder interactuar con el script</p>"},{"location":"codigo%20%26%20scripts/codigo4.2/","title":"C\u00f3digo 4.2:","text":"Determinaci\u00f3n num\u00e9rica del valor de optimizaci\u00f3n \u03c6 para sistemas multietapas<pre><code>import numpy as np\nfrom scipy.optimize import root\ndef main():\ndef delta_v(x,n,v_s,eps,dv): #Se define la funcion 5\ndelta = 0\nfor i in range(n):\ndelta = delta + v_s[i]*np.log((v_s[i]-x)/(eps[i]*v_s[i]))\ni += 1\nreturn dv-delta\nn = 3 #Numero de etapas\nv_s = [4500,5000,4500] #Valores de velocidad efectiva de eyecci\u00f3n para cada una de las etapas\neps = [0.08,0.12,0.16] #Valores de raz\u00f3n de masa estructural para cada una de las etapas\ndv = 7000 #Delta v deseado\nvarphi = root(delta_v,0.8,args=(n,v_s,eps,dv))\nprint(varphi.x[0].round(2))\nif __name__ == '__main__':\nmain()\n</code></pre>"},{"location":"codigo%20%26%20scripts/codigo4.2/#descripcion-a-detalle","title":"Descripci\u00f3n a detalle:","text":"<ol> <li> <p><code>import numpy as np</code> y <code>from scipy.optimize import root</code>: Estas l\u00edneas importan los m\u00f3dulos necesarios. Numpy se utiliza para realizar operaciones matem\u00e1ticas y scipy.optimize proporciona la funci\u00f3n <code>root</code> que se utiliza para encontrar las ra\u00edces de ecuaciones.</p> </li> <li> <p><code>def main():</code> : Esta l\u00ednea define la funci\u00f3n principal.</p> </li> <li> <p><code>def delta_v(x,n,v_s,eps,dv):</code> : Esta funci\u00f3n interna define la ecuaci\u00f3n que se va a resolver. Esta ecuaci\u00f3n se basa en el c\u00e1lculo de la variaci\u00f3n de la velocidad (<code>delta_v</code>) de un veh\u00edculo de m\u00faltiples etapas.</p> </li> <li> <p>Las siguientes l\u00edneas dentro de la funci\u00f3n <code>main</code> definen varias constantes:</p> <ul> <li><code>n</code> es el n\u00famero de etapas del veh\u00edculo.</li> <li><code>v_s</code> es una lista de los valores de velocidad efectiva de eyecci\u00f3n para cada una de las etapas.</li> <li><code>eps</code> es una lista de los valores de la raz\u00f3n de masa estructural para cada una de las etapas.</li> <li><code>dv</code> es el delta-v deseado.</li> </ul> </li> <li> <p><code>varphi = root(delta_v,0.8,args=(n,v_s,eps,dv))</code>: Esta l\u00ednea utiliza la funci\u00f3n <code>root</code> de scipy para encontrar la ra\u00edz de la ecuaci\u00f3n definida en <code>delta_v</code>. El valor inicial para la b\u00fasqueda de la ra\u00edz es <code>0.8</code>.</p> </li> <li> <p><code>print(varphi.x[0].round(2))</code>: Esta l\u00ednea imprime el resultado de la b\u00fasqueda de la ra\u00edz, que es el valor calculado para <code>varphi</code>. Se redondea a 2 decimales.</p> </li> <li> <p>Las \u00faltimas dos l\u00edneas simplemente llaman a la funci\u00f3n principal cuando se ejecuta el script.</p> </li> </ol>"},{"location":"codigo%20%26%20scripts/codigo4.2/#playground","title":"Playground:","text":"<p>Haga click en este enlace para poder interactuar con el script</p>"}]}